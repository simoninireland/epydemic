Version 1.9.1

   - Refactored event taps to be more general
   - Added events and new query methods to the Newman-Ziff percolation processes
   - Changed the way Newman-Ziff results are returned in notebooks
   - Added named sub-processes in process sequences
   - Reformulated tutorial to avoid some confusions
   - Added recipe on percolation

Version 1.8.1 (2022-01-26)

   - Added recording of first hitting time for nodes
   - Added options to CompartmentedMode.markOccupied() and CompartmentedModel.markHit()
     to only record the first occupation and hitting times respectively,
     and to ignore subsequent re-transmission or -infection
   - Added tests to make sure epidemics happen (when they should) on a per-model
     basis but under both dynamics
   - Added more tests for generating functions
   - Simplified experimental parameter names
   - Small changes to the way topologies are marked in parameters
   - Integrated opinion dynamics, vaccine-enhanced SIR, and anti-vax rumour models
   - Removed all uses of multiple inheritance
   - Added tutorial explanations of process composition
   - Fixed CI job
   - Added optional meaningful event names
   - Added event taps sub-system, documentation, and implemntation note
   - Added installing type stubs for Python 10
   - Added InterSphinx links to the important parts of epyc, to make it easier to
     understand what's going on in large-scale simulations
   - Changed the generating function interface slightly, as well as its internals

Version 1.7.2 (2021-07-06)

   - Fixed generating functions library not installing

Version 1.7.1 (2021-06-10)

   - Changed implementation of Percolate to use the Newman-Ziff approach
   - Refactored the setting of initial compartments in CompartmentedModel to
     use changeInitialCompartment instead of changeCompartment, so that initial
     behaviour can be different
   - Changed the cookbook recipe on choosing which nodes to infect to include
     more code
   - Changed the exception raised by CompartmentedModel.initialCompartmentDistribution
     in the case of an illegal distribution to ValueError
   - Integrated the generating functions library
   - Added type annotations to documentation format (makes reading the docs easier)
   - Added "shuffle" process for rewiring edges
   - Wrote implementation note on generating functions

Version 1.6.1 (2021-05-13)

   - Added topology marker to parameters to capture the network generator used
   - Changed names of network generation parameters to match the topology markers
   - Added class inheritance diagram to documentation
   - Added speed improvements to front page
   - Added discussion of going from R values to SIR parameters

Version 1.5.1 (2021-04-27)

   - Started maintaining simulation time in NetworkDynamics
   - Changed the way Monitor represents its results, to avoid problems persisting
     in HDF5 lab notebooks
   - Lots of changes to typing and imports, for code style
   - Upgraded Locus to get a major performance improvement
   - Updated the cookbook recipe for parallelism and multicore
   - Fixed typos in monitor recipe, added plotting code
   - Added documentation for DrawSets

Version 1.4.2 (2021-03-10)

   - Fixed issue with SynchronousDynamics
   - Added cookbook recipe on keeping access to the end-state network

Version 1.4.1 2021-02-10

   - Added network statistics collection as a process
   - Refactored Process and Dynamics so that the dynamics maintains the
     working copy of the network rather than the process
   - Added process sequence combinator
   - Added tutorial on sequencing vs sub-classing processes
   - Fixed bug in Monitor that only appeared when sequencing

Version 1.3.2 2021-02-08

   - Refactored Percolate process to allow specialisation of behaviour for occupied
     and unoccupied edges

Version 1.3.1 2021-02-03

   - Refactored Dynamics to introduce NetworkExperiment, where there's no process per se
   - Added powerlaw-with-cutoff as a standard network generator
   - Added Newman-Ziff algorithms for exploring percolation
   - Very basic Newman-Ziff tests, need significant work
   - Added script to create percolation diagrams

Version 1.2.1 2020-12-10

   - Added percolation process
   - Backported to support versions of Python from 3.6, and hence also PyPy3

Version 1.1.1 2020-12-01

   - Removed support for Python 3.6 and 3.7 (since we need the annotations
     future and types features only supported from Python 3.8)


Version 1.1.0 2020-11-19

   - Fixed behaviour for processes with no loci
   - Added type annotations
   - Re-configured to use epyc >= 1.0.1 API

Version 1.0.0 2020-09-25

   - Refactored to add network generators
   - Removed tutorial on building networks at experiments, since generators solve that
   - Added generators for the common network science network classes
   - Added tutorial on building a new network generator
   - Cross-referenced a lot of the documentation
   - Added notes to tutorials where they seemed unclear
   - Renamed AddDelete.remove() event to delete()
   - Added cookbook recipe on dynamic population simulations
   - Added discussion of clustered networks to cookbook recipe on human contact networks
   - Added more references to bibliography

Version 0.99.8 2020-05-30

   - Removed use of six, since we're no longer supporting Python 2.7
   - Removed six and future from requirements
   - Replaced standard Python random number generation with the new numpy
     generator class
   - Added SEIR model
   - Documented SIRS model
   - Slightly re-structured the presentation of the API documentation

Version 0.99.7 2020-04-30

   - Added superclass calls in models that were preventing multiple inheritance from
     working properly
   - Refactored events and loci into Dynamics rather than Process
   - Defined a monitor process to capture the sizes of all loci as time series
   - Changed names of parameters and results to be more structured, to avoid conflicts
   - Added some implementation notes

Version 0.99.6 2020-04-14

   - Removed Python2.7 compatibility, since NetworkX v.2.4 doesn't support it anyway
   - Fixed compartmented loci for adaptive networks
   - Adding an edge where the endpoint nodes don't exist now throws an exception rather
     then creating the nodes automatically, since there's no sensible general default
     behaviour
   - Removed the maintenance of nodes in different compartments, since the
     same effect can be had just as easily (and with less space) using loci

Version 0.99.5 2020-03-27

   - Started maintaining lists of nodes in different compartments to
     remove a bottleneck for adaptive networks

Version 0.99.4 2020-03-23

   - Fixed problem removing edges, removed some debugging messages
     that'd stayed in somehow

Version 0.99.3 2020-03-22

   - Fixed behaviour when network is adaptive (add/remove nodes/edges)
   - Added CompartmentedModel.getCompartment()

Version 0.99.2 (v1.0 release candidate 2) 2020-03-16

   - Moved development to Python3.7
   - Added "wheel" distribution format, updated to simpler build system
   - Fully merged process-refactor branch
   - Updated library dependencies
   - Added an interface to evolve and interact with the network, which means that
     things compose more cleanly
   - Removed a lot of unnecessary parameter-passing after the refactoring, including
     simplifying event functions and compartment management
   - Added posting of repeated events
   - Added cookbook article on monitoring processes
   - Added recording time an edge became occupied
   - Added some badges to README.rst

Version 0.99.1 (v1.0 release candidate 1) 2019-04-11

   - Added SIRS model of partial-in-time immunity
   - Seperated process from dynamics
   - Fixed rates
   - Added cookbook of recipes for use

Version 0.5.1 2018-07-27

   - Fixed bug in the event selection routine for Gillespie dynamics
   - Added shuffling of events to avoid anomalies in event selection
   - Syntax changes to be Python3 compatible
   - Made test/CompartmentedDynamicsTest a mixin to avoid incorrect test calls
   - Introduced nose and tox for testing against multiple Python versions
   - Changed compartmented models to return a flat dict of results with just
     the final sizes of each compartment
   - Changed documentation to a more tutorial format

Version 0.4.2 2018-03-12

   - Maintenance release to fix compatibility with NetworkX 2.1

Version 0.4.1 2018-03-06

   - Upgraded to match new version of NetworkX
   - Move to slightly better build system
   - Refactored network setup to work better with epyc's distributed
     computations

Version 0.3.1 2017-08-16

   - Added a reset() method to compartmented models to allow them to
     be built repeatedly
   - Gave StochasticDynamics.eventRateDistribution() a default implemntation
   - Added CompartmentedModel.build() as an abstract method, just so
     we could add documentation for it
   - Fixed a few minor issues

Version 0.3.0 2017-06-28

   - Refactored synchronous dynamics to be completely independent of models
   - Added posting events for fixed times
   - Added fixed-recovery period model variants

Version 0.2.0 2017-06-27

   - New approach for compartmented models and dynamics
   - Updated documentation
   - Added "Mathematics of epidemics on networks" book to bibliography
   - Refactored test suite

Version 0.1.1 2017-06-15

   - Added more documentation, bibliography, glossary
   - Started on first explanatory notebook draft

Version 0.1.0 2017-06-12

   - First disentanglement from the book repo
