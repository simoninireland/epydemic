#+title: epydemic
#+startup: content

* epydemic: Epidemic simulation in Python                           :PROJECT:

** Release planning

*** Release 1.8.1

**** Coding [6/12]

    - [ ] Add degree-distribution-preserving rewiring functions
      preserving P(k, k') cite:UnreasonableEffectiveness (branch
      rewiring-processes)
    - [X] Add clients for the archive
    - [X] Simplify parameter names (to match archive)
    - [X] Generators should have an ordinary iterator interface
    - [X] Change generators to update experimental parameters, remove
      reference to topology from StochasticDynamics
    - [ ] A network generator that encapsulates an experiment, to get
      the final result network of an adaptive process
    - [ ] Refactor Monitor to have a basic sampling process that
      gets sub-classed for monitoring, and for sampling the degree
      distribution of the network as it evolves
    - [ ] Add unpacking of time series to Monitor
    - [X] Deal with Libby's pull request, integrate vaccine and
      opinion dynamics models
    - [ ] Full test of vaccine and disease models in parallel
    - [X] Add names to events in reference models
    - [ ] Test event firing

**** Bugs [1/1]

     - [X] Import of gf library from pip?

**** Documentation [2/3]

     - [X] Change references to network generators to ensembles
     - [X] Use proper BibTeX file and citations
     - [ ] Add docs on event names (in API) and their uses (in cookbook?)


** Sub-projects

*** Acceleration

**** GPU acceleration

 Will need to be [[https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/overview.html][containerised]].

**** Cython acceleration

     Using Cython requires code changes. They're only annotations, to
     provide C types for variables and calling conventions on methods
     -- but fairly substantial changes, and not backwards compatible,
     meaning it'd be a commitment

     Also compare against [[https://github.com/pyston/pyston][Pyston]]

*** PyPy-based compute cluster controlled from CPython [0/2]

    branch pypy-compute

    PyPy doesn't have a full set of library integrations: specifically
    it can't load scipy or matplotlib. That (especially the latter)
    makes it unsuitable for front-end use a lot of the time.

    One way to address this is to run a compute cluster in a PyPy venv
    and control it from Jupyter running in a CPython venv. That way we
    can get the acceleration without the problems.

    Of course this opens up another can of worms. The latest CPython
    is version 3.9; the latest PyPy is on 3.7. So we'd have to run an
    older CPython to avoid language mis-matches.

    - [ ] Set up compute cluster in PyPy linked to Jupyter on CPython
    - [ ] Check interactions between versions
    - [ ] Does PyPy work with ParallelLab?

*** Containerisation

    To run in the cloud we need to be able to containerise. There are a
    couple of options here:

    1. A single container running on a multicore host, extended with
       whatever code is needed for the application. This is
       straightforward, but limited by the single-host performance
       (which might be fine for a lot of applications).
    2. Multiple containers acting together, with a virtual network
       between them. This probably needs ~docker-compose~ and some
       tests to see whether it's possible to run ~ipyparallel~ in this
       way (which I think it is).

*** TODO Generating function library [7/10]

    branch gf

    We need a generating functions library, perhaps alongside the
    network generator classes, so we can use this formalism easily
    alongside epydemic's simulations. In particular we need the
    high-order-numerical-derivative function to be able to extract
    probabilities etc. (This turns out to be perfectly possible using
    the factorial functions from mpmath.)

    The biggest challenge might be to write documentation....

    - [X] First version
    - [X] Integrate with calls etc, so they behave like functions
    - [X] Access coefficients by index
    - [X] High-degree (k=1000) coefficient extraction
    - [X] Derivatives
    - [X] Test suite
    - [X] Memoisation
    - [ ] Deriving new generating functions, with more complex
      (functional) values for X
    - [ ] Multi-variable generating functions
    - [ ] Standalone from epydemic?

    There's another approach alongside this, which would be to write a
    symbolic package with the generating functions in them, for use in
    Sage. This would then complement the numerical side.

**** TODO Extend with multiple variables
     SCHEDULED: <2021-11-25 Thu>

     How does this work with respect to the single-variable case?

     Need to understand the use cases.

**** Consider refactoring into a standalone package

*** Multilayer networks

    A useful extra composition is to have multiple processes running on
    different layers of the network, where (for example) edges are
    "coloured" and processes only make use of edges of their
    colour. Edges can change colour.

    The basic problem is t keep the edges straight in the right loci,
    but also to provide an API for getting (for example) incident
    edges of a given colour and adjacent nodes accessed by traversing
    edges of a given colour.

*** TODO JOSS paper
    DEADLINE: <2021-12-10 Fri> SCHEDULED: <2021-11-29 Mon>
*** DONE API interface to the epydemic archive [3/3]

    branch archive

    The idea here is that there is a network generator that can
    attach to an epydemic archive server and download a network
    instead of building one. That way we can have a range of pre-built
    networks -- maybe real-world, maybe very large and time-consuming
    random networks -- and re-use them.

    To do this we need to be able to ensure that we're sampling from a
    large enough set of possible networks, and make sure we don't
    repeatedly download a small subset accidentally.

    - [X] Client interface to submit a network
    - [X] Client interface to download specific network by UUID
    - [X] Search interface

*** A message-passing dynamics

    Compare the message-passing dynamics of
    cite:MessagePassingEpidemicModels to the usual Gillespie approach,
    to allow more general distributions in infection and recovery
    times. This would probably require an API change for models.

*** A metapopulation model

    What would we need to do to use the /same/ process models in a
    metapopulation setting? Is it even possible? Assuming that
    within-population is mixed and there are flow rates
    (per-compartment?) between populations?

*** A differential infection model

    Allow $\beta$ to be a matrix rather than a single number.

*** Analysis of unfair draw

    branch unfair-draw

    My implementation of balanced binary trees with minimal
    information introduces bias that's visible to the add-delete
    process, but not to the epidemic processes. This is something that
    needs to (first) be fixed (which is easy), and (second) understood
    as to why it's only partially visible.
